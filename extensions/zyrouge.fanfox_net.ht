const baseURL = 'https://fanfox.net';

const defaultHeaders: Map<str> = {
    'User-Agent': httpUserAgent(),
    'Referer': baseURL,
    'Cookie': 'isAdult=1;',
}

fun searchURL(terms: str) -> str {
    return ensureURL('${baseURL}/search?title=${terms}');
}

fun defaultLocale() -> str {
    return "en";
}

fun search(terms: str, locale: str) {
    return resolveFuture(fetch({
        'method': 'get',
        'url': searchURL(terms),
        'headers': defaultHeaders
    }), fun (err: str?, resp) {
        if (err != null) return throwError(err);

        const document: HtmlElement = parseHtml(resp['body']);

        return mapList(document.querySelectorAll('.line-list li'), fun (i: num, x: HtmlElement) {
            const link: HtmlElement = x.querySelector('.manga-list-4-item-title a');
            const url: str = link.attributes['href'];
            const image: str = x.querySelector('img').attributes['src'];

            return {
                'title': link.text.trim(),
                'url': ensureURL('${baseURL}${url}'),
                'thumbnail': {
                    'url': ensureURL(image),
                    'headers': defaultHeaders,
                },
                'locale': locale,
            };
        });
    });
}

fun getInfo(url: str, locale: str) {
    return resolveFuture(fetch({
        'method': 'get',
        'url': ensureURL(url),
        'headers': defaultHeaders
    }), fun (err: str?, resp) {
        if (err != null) return throwError(err);

        const document: HtmlElement = parseHtml(resp['body']);
        
        const chapters: List<Map> = filterList(mapList(document.querySelectorAll('#chapterlist li a'), fun (i: num, x: HtmlElement) {
            const title: str = x.querySelector('.title3').text;
            const shortTitle: RegExpMatchResult? = regexMatch('-(.*)', title);
            const route: str = x.attributes['href'];
            const vol: RegExpMatchResult? = regexMatch('Vol.(\\d+)', title);
            const chap: RegExpMatchResult? = regexMatch('Ch.([\\d.]+)', title);

            if (chap != null) {
                return {
                    'title': shortTitle != null ? shortTitle.group(1) : title,
                    'url': ensureURL('${baseURL}${route}'),
                    'chapter': chap.group(1),
                    'volume': vol != null ? vol.group(1) : null,
                    'locale': locale,
                };
            }

            return null;
        }), fun (i: num, x: Map) {
            return x != null;
        });

        return {
            'title': document.querySelector('.detail-info-right-title-font').text,
            'url': ensureURL(url),
            'thumbnail': {
                'url': ensureURL(document.querySelector('img.detail-info-cover-img').attributes['src']),
                'headers': defaultHeaders
            },
            'chapters': chapters,
            'locale': locale,
            'availableLocales': [
                locale
            ]
        };
    });
}

fun replaceWithMobileURL(url: str) -> str {
    return regexReplaceFirst(url, 'https?:\\/\\/fanfox', 'https://m.fanfox');
}

fun getChapter(chapter: Map) {
    const url: str = replaceWithMobileURL(chapter['url']);

    return resolveFuture(fetch({
        'method': 'get',
        'url': ensureURL(url),
        'headers': defaultHeaders
    }), fun (err: str?, resp) {
        if (err != null) return throwError(err);

        return mapList(
            parseHtml(resp['body']).querySelector('select.mangaread-page').querySelectorAll('option'),
            fun (i: num, x: Map) {
                return {
                    'url': ensureURL(x.attributes['value']),
                    'locale': chapter['locale']
                };
            }
        );
    });
}

fun getPage(page: Map) {
    const url: str = replaceWithMobileURL(page['url']);

    return resolveFuture(fetch({
        'method': 'get',
        'url': ensureURL(url),
        'headers': defaultHeaders
    }), fun (err: str?, resp) {
        if (err != null) return throwError(err);

        const img: RegExpMatchResult? = regexMatch('<img src="(.*?)".*id="image".*>', resp['body']);
        if (img == null) return throwError('Failed to parse image URL');

        return {
            'url': ensureURL(img.group(1)),
            'headers': defaultHeaders
        };
    });
}
const baseURL = 'https://mangayabu.top/';

const defaultHeaders: Map<str> = {
    'User-Agent': httpUserAgent(),
}

fun searchURL(terms: str) -> str {
    return ensureURL('${baseURL}/?s=${terms}');
}

fun defaultLocale() -> str {
    return "pt";
}

fun search(terms: str, locale: str) {
    return resolveFuture(fetch({
        'method': 'get',
        'url': searchURL(terms),
        'headers': defaultHeaders
    }), fun (err, resp) {
        if (err != null) return throwError(err);

        const document: HtmlElement = parseHtml(resp['body']);

        return mapList(document.querySelectorAll('.row .col.s6.l2'), fun (i: num, x: HtmlElement) {
            const link: HtmlElement = x.querySelector('.card .card-image a');
            const url: str = link.attributes['href'];
            const image: str = x.querySelector('.mango-hover img').attributes['src'];

            return {
                'title': link.attributes['title'].trim(),
                'url': ensureURL(url),
                'thumbnail': {
                    'url': ensureURL(image),
                    'headers': defaultHeaders,
                },
                'locale': locale,
            };
        });
    });
}

fun getInfo(url: str, locale: str) {
    return resolveFuture(fetch({
        'method': 'get',
        'url': ensureURL(url),
        'headers': defaultHeaders
    }), fun (err, resp) {
        if (err != null) return throwError(err);

        const document: HtmlElement = parseHtml(resp['body']);
        
        const chapters: List<Map> = mapList(document.querySelectorAll('.manga-chapters .single-chapter a'), fun (i: num, x: HtmlElement) {
            const chNumber: str = x.text.replaceFirst('Cap√≠tulo', '').replaceFirst('-', '.').trim();
            const url: str = x.attributes['href'].trim();

            return {
                'title': null,
                'url': ensureURL(url),
                'chapter': chNumber,
                'volume': null,
                'locale': locale,
            };
        });
       
        const thumbnail: str = document.querySelector('.mango-cover-left-holder a img').attributes['src'].trim();
        
        return {
            'title': document.querySelector('.breadcrumb_last').text,
            'url': ensureURL(url),
            'thumbnail': {
                'url': ensureURL(thumbnail),
                'headers': defaultHeaders
            },
            'chapters': chapters,
            'locale': locale,
            'availableLocales': [
                locale
            ]
        };
    });
}

fun getChapter(chapter: Map) {
    return resolveFuture(fetch({
        'method': 'get',
        'url': ensureURL(chapter['url']),
        'headers': defaultHeaders
    }), fun (err, resp) {
        if (err != null) return throwError(err);

        const chapter: List<Map> =  filterList(mapList(
            parseHtml(resp['body']).querySelectorAll('.row img'),
            fun (i: num, x: Map) {
                // Remove two first images that are unwanted
                if (i < 2) {
                    return null;
                }
                const url: str = x.attributes['src'].trim();
                return {
                    'url': ensureURL(url),
                    'locale': chapter['locale']
                };
            }), fun (i: num, x: Map) {
                return x != null;
        });

        return chapter;
    });
}

fun getPage(page: Map) {
    return {
        'url': page['url'],
        'headers': defaultHeaders
    };
}
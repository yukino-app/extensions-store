const baseURL = 'https://readm.org';

const defaultHeaders: Map<str> = {
    'User-Agent': httpUserAgent(),
    'Referer': baseURL,
}

fun searchURL() -> str {
    return ensureURL('${baseURL}/service/search');
}

fun defaultLocale() -> str {
    return "en";
}

fun search(terms: str, locale: str) {
    return resolveFuture(fetch({
        'method': 'post',
        'url': searchURL(),
        'headers': mergeMap(defaultHeaders, {
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
            'x-requested-with': 'XMLHttpRequest'
        }),
        'body': qsEncode({
            'dataType': 'json',
            'phrase': terms,
        }),
    }), fun (err, resp) {
        if (err != null) return throwError(err);

        const parsed = jsonDecode(resp['body']);

        return mapList(parsed['manga'], fun (i: num, x: Map) {
            const url: str = x['url'];
            const thumbnail: str = x['image'];
            return {
                'title': x['title'],
                'url': ensureURL('${baseURL}${url}'),
                'thumbnail': {
                    'url': ensureURL('${baseURL}${thumbnail}'),
                    'headers': defaultHeaders,
                },
                'locale': locale,
            };
        });
    });
}

fun getInfo(url: str, locale: str) {
    return resolveFuture(fetch({
        'method': 'get',
        'url': ensureURL(url),
        'headers': defaultHeaders
    }), fun (err, resp) {
        if (err != null) return throwError(err);

        const document: HtmlElement = parseHtml(resp['body']);
        
        const chapters: List<Map> = mapList(document.querySelectorAll('.episodes-list .table-episodes-title a'), fun (i: num, x: HtmlElement) {
            const sep: str = x.text.replaceFirst('Chapter', '').trim().split(':');
            const url: str = x.attributes['href'].trim();
            const cvMatch = regexMatch('Chapter (\\d+\\.?\\d*)(v(\\d+))?', sep[0]);

            return {
                'title': sep.length > 1 ? sep[1].trim() : null,
                'url': ensureURL('${baseURL}${url}'),
                'chapter': cvMatch != null ? cvMatch.group(1) : sep[0].replaceFirst('Chapter', '').trim(),
                'volume': cvMatch != null ? cvMatch.group(3) : null,
                'locale': locale,
            };
        });

        const thumbnail: str = document.querySelector('.series-profile-thumb').attributes['src'].trim();
        return {
            'title': document.querySelector('.page-title').text,
            'url': ensureURL(url),
            'thumbnail': {
                'url': ensureURL('${baseURL}${thumbnail}'),
                'headers': defaultHeaders
            },
            'chapters': chapters,
            'locale': locale,
            'availableLocales': [
                locale
            ]
        };
    });
}

fun getChapter(chapter: Map) {
    return resolveFuture(fetch({
        'method': 'get',
        'url': ensureURL(chapter['url']),
        'headers': defaultHeaders
    }), fun (err, resp) {
        if (err != null) return throwError(err);

        return mapList(
            parseHtml(resp['body']).querySelectorAll('.ch-images img'),
            fun (i: num, x: Map) {
                const url: str = x.attributes['src'].trim();
                return {
                    'url': ensureURL('${baseURL}${url}'),
                    'locale': chapter['locale']
                };
            }
        );
    });
}

fun getPage(page: Map) {
    return {
        'url': page['url'],
        'headers': defaultHeaders
    };
}
